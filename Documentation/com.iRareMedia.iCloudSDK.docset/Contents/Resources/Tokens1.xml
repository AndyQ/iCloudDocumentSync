<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/iCloud.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/iCloud</TokenIdentifier>
			<Abstract type="html">iCloud Document Sync helps integrate iCloud into iOS (OS X coming soon) Objective-C document projects with one-line code methods. Sync, upload, manage, and remove documents to and from iCloud with only a few lines of code (compared to the 400+ lines that it usually takes). Updates and more details on this project can be found on GitHub. If you like the project, please star it on GitHub!</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/setDelegate:</TokenIdentifier>
			<Abstract type="html">iCloud Delegate helps call methods when document processes begin or end</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, weak) id&lt;iCloudDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/delegate</TokenIdentifier>
			<Abstract type="html">iCloud Delegate helps call methods when document processes begin or end</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, weak) id&lt;iCloudDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/iCloud/delegate</TokenIdentifier>
			<Abstract type="html">iCloud Delegate helps call methods when document processes begin or end</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, weak) id&lt;iCloudDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/query</TokenIdentifier>
			<Abstract type="html">Returns an NSMetadataQuery</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (NSMetadataQuery *)query</Declaration>
			
			<ReturnValue><Abstract type="html">The iCloud NSMetadataQuery.</Abstract></ReturnValue>
			<Anchor>//api/name/query</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/fileList</TokenIdentifier>
			<Abstract type="html">Returns a list of files stored in iCloud</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (NSMutableArray *)fileList</Declaration>
			
			<ReturnValue><Abstract type="html">NSMutableArray (editable list) of files stored in iCloud.</Abstract></ReturnValue>
			<Anchor>//api/name/fileList</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/previousQueryResults</TokenIdentifier>
			<Abstract type="html">Returns a list of the files from the previous iCloud Query</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (NSMutableArray *)previousQueryResults</Declaration>
			
			<ReturnValue><Abstract type="html">NSMutableArray (editable list) of files in iCloud during the previous sync.</Abstract></ReturnValue>
			<Anchor>//api/name/previousQueryResults</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/checkCloudAvailability</TokenIdentifier>
			<Abstract type="html">Check whether or not iCloud is available and that it can be accessed. Returns a boolean value.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)checkCloudAvailability</Declaration>
			
			<ReturnValue><Abstract type="html">YES if iCloud is available. NO if iCloud is not available.</Abstract></ReturnValue>
			<Anchor>//api/name/checkCloudAvailability</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/updateFilesWithDelegate:</TokenIdentifier>
			<Abstract type="html">Check for and update the list of files stored in your app&apos;s iCloud Documents Folder. This method is automatically called by iOS when there are changes to files in the iCloud Directory.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (void)updateFilesWithDelegate:(id&lt;iCloudDelegate&gt;)delegate</Declaration>
			<Parameters>
				<Parameter>
					<Name>delegate</Name>
					<Abstract type="html">The iCloud Class uses a delegate. The iCloudFilesDidChange:withNewFileNames: delegate method is triggered by this method.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/updateFilesWithDelegate:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/saveDocumentWithName:withContent:completion:</TokenIdentifier>
			<Abstract type="html">Create a document to upload to iCloud.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (void)saveDocumentWithName:(NSString *)name withContent:(NSData *)content completion:(void ( ^ ) ( UIDocument *cloudDocument , NSData *documentData , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the UIDocument file being written to iCloud</Abstract>
				</Parameter><Parameter>
					<Name>content</Name>
					<Abstract type="html">The data to write to the UIDocument file</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Code block called when the document is successfully saved. The completion block passes UIDocument and NSData objects containing the saved document and it&apos;s contents in the form of NSData. The NSError object contains any error information if an error occurred, otherwise it will be nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/saveDocumentWithName:withContent:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/uploadLocalOfflineDocumentsWithDelegate:repeatingHandler:completion:</TokenIdentifier>
			<Abstract type="html">Upload any local files that weren&apos;t created with iCloud or were created while offline</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (void)uploadLocalOfflineDocumentsWithDelegate:(id&lt;iCloudDelegate&gt;)delegate repeatingHandler:(void ( ^ ) ( NSString *fileName , NSError *error ))repeatingHandler completion:(void ( ^ ) ( void ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>delegate</Name>
					<Abstract type="html">The iCloud Class uses a delegate. The iCloudFileUploadConflictWithCloudFile:andLocalFile: delegate method is triggered by this method.</Abstract>
				</Parameter><Parameter>
					<Name>repeatingHandler</Name>
					<Abstract type="html">Code block called after each file is uploaded to iCloud. This block is called every-time a local file is uploaded, therefore it may be called multiple times. The NSError object contains any error information if an error occurred, otherwise it will be nil.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">Code block called after all files have been uploaded to iCloud. This block is only called once at the end of the method, regardless of any successes or failures that may have occurred during the upload(s).</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/uploadLocalOfflineDocumentsWithDelegate:repeatingHandler:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/deleteDocumentWithName:completion:</TokenIdentifier>
			<Abstract type="html">Delete a document from iCloud.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (void)deleteDocumentWithName:(NSString *)name completion:(void ( ^ ) ( NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the UIDocument file to delete from iCloud</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Code block called when a file is successfully deleted from iCloud. The NSError object contains any error information if an error occurred, otherwise it will be nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteDocumentWithName:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/retrieveCloudDocumentWithName:completion:</TokenIdentifier>
			<Abstract type="html">Open a UIDocument stored in iCloud. If the document does not exist, a new blank document will be created using the documentName provided. You can use the doesFileExistInCloud: method to check if a file exists before calling this method.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (void)retrieveCloudDocumentWithName:(NSString *)documentName completion:(void ( ^ ) ( UIDocument *cloudDocument , NSData *documentData , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the UIDocument file in iCloud</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Code block called when the document is successfully retrieved (opened or downloaded). The completion block passes UIDocument and NSData objects containing the opened document and it&apos;s contents in the form of NSData. If there is an error, the NSError object will have an error message (may be nil if there is no error).</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/retrieveCloudDocumentWithName:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/doesFileExistInCloud:</TokenIdentifier>
			<Abstract type="html">Check if a file exists in iCloud</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)doesFileExistInCloud:(NSString *)fileName</Declaration>
			<Parameters>
				<Parameter>
					<Name>fileName</Name>
					<Abstract type="html">The name of the UIDocument in iCloud</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">BOOL value, YES if the file does exist in iCloud, NO if it does not</Abstract></ReturnValue>
			<Anchor>//api/name/doesFileExistInCloud:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/getListOfCloudFiles</TokenIdentifier>
			<Abstract type="html">Get a list of files stored in iCloud</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (NSArray *)getListOfCloudFiles</Declaration>
			
			<ReturnValue><Abstract type="html">NSArray with a list of all the files currently stored in your app&apos;s iCloud Documents directory</Abstract></ReturnValue>
			<Anchor>//api/name/getListOfCloudFiles</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/deleteDocumentWithName:withDelegate:completion:</TokenIdentifier>
			<Abstract type="html">DEPRECATED. Delete a document from iCloud. (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; This method is deprecated, use deleteDocumentWithName:completion: instead.&lt;/span&gt;)</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (void)deleteDocumentWithName:(NSString *)name withDelegate:(id&lt;iCloudDelegate&gt;)delegate completion:(void ( ^ ) ( NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the UIDocument file to delete from iCloud</Abstract>
				</Parameter><Parameter>
					<Name>delegate</Name>
					<Abstract type="html">The iCloud Class requires a delegate. Make sure to set the delegate of iCloud before calling this method. The documentWasSaved delegate method is triggered by this method.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Code block called when a file is successfully deleted from iCloud. The NSError object contains any error information if an error occurred, otherwise it will be nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteDocumentWithName:withDelegate:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/saveDocumentWithName:withContent:withDelegate:completion:</TokenIdentifier>
			<Abstract type="html">DEPRECATED. Create a document to upload to iCloud. (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; This method is deprecated, use saveDocumentWithName:withContent:completion: instead.&lt;/span&gt;)</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (void)saveDocumentWithName:(NSString *)name withContent:(NSData *)content withDelegate:(id&lt;iCloudDelegate&gt;)delegate completion:(void ( ^ ) ( UIDocument *cloudDocument , NSData *documentData , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the UIDocument file being written to iCloud</Abstract>
				</Parameter><Parameter>
					<Name>content</Name>
					<Abstract type="html">The data to write to the UIDocument file</Abstract>
				</Parameter><Parameter>
					<Name>delegate</Name>
					<Abstract type="html">The iCloud Class requires a delegate. Make sure to set the delegate of iCloud before calling this method. The documentWasSaved delegate method is triggered by this method.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Code block called when the document is successfully saved. The completion block passes UIDocument and NSData objects containing the saved document and it&apos;s contents in the form of NSData. The NSError object contains any error information if an error occurred, otherwise it will be nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/saveDocumentWithName:withContent:withDelegate:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/uploadLocalOfflineDocumentsWithDelegate:completion:</TokenIdentifier>
			<Abstract type="html">DEPRECATED. Upload any local files that weren&apos;t created with iCloud or were created while offline (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; This method is deprecated, use uploadLocalOfflineDocumentsWithDelegate:repeatingHandler:completion: instead.&lt;/span&gt;)</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (void)uploadLocalOfflineDocumentsWithDelegate:(id&lt;iCloudDelegate&gt;)delegate completion:(void ( ^ ) ( NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>delegate</Name>
					<Abstract type="html">The iCloud Class requires a delegate. Make sure to set the delegate of iCloud before calling this method.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Code block called when files are uploaded to iCloud. The NSError object contains any error information if an error occurred, otherwise it will be nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/uploadLocalOfflineDocumentsWithDelegate:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
	</File>
</Tokens>